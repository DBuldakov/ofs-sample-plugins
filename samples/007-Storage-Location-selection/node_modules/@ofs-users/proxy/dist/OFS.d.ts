/// <reference types="node" />
import { PathLike } from 'fs';

type OFSCredentials = {
    instance: string;
    clientId: string;
    clientSecret: string;
};
interface OFSResponseInterface {
    status: number;
    description: string | undefined;
    data: any;
    url: URL;
    contentType?: string;
}
declare class OFSResponse implements OFSResponseInterface {
    status: number;
    description: string | undefined;
    data: any;
    url: URL;
    contentType?: string;
    constructor(url: URL, status: number, description?: string, data?: any, contentType?: string);
}
interface ListResponse {
    totalResults: number;
    items: Array<any>;
    links: any;
}
interface Subscription {
    subscriptionId: string;
    applicationId: string;
    createdTime: string;
    expirationTime: string;
    subscriptionTitle: string;
    subscriptionConfig: any;
    links: any;
}
interface ActivityResponse {
    customerName: any;
    activityId: number;
}
interface SubscriptionListResponse {
    totalResults: number;
    items: Array<Subscription>;
    links: any;
}
interface ActivityListResponse {
    totalResults: number;
    items: Array<Subscription>;
    links: any;
}
interface OFSTranslation {
    language: string;
    name: string;
    languageISO: string;
}
interface OFSPropertyDetails {
    label: string;
    name?: string;
    type?: string;
    entity?: string;
    gui?: string;
    allowDraw?: boolean;
    cloneFlag?: boolean;
    fileSizeLimit?: string;
    getGeolocation?: boolean;
    hint?: string;
    lines?: number;
    maxHeight?: number;
    maxWidth?: number;
    mimeTypes?: [];
    template?: string;
    transformation?: any;
    watermark?: boolean;
    translations?: OFSTranslation[];
    links?: any;
}
interface OFSGetPropertiesParams {
    entity?: string;
    language?: string;
    limit?: number;
    offset?: number;
    type?: number;
}
declare class OFSPropertyList {
    items: OFSPropertyDetails[];
    limit: number;
    offset: number;
    totalResults: number;
}
declare class OFSSubscriptionResponse extends OFSResponse {
    data: SubscriptionListResponse;
}
declare class OFSActivityResponse extends OFSResponse {
    data: ActivityResponse;
}
declare class OFSPropertyDetailsResponse extends OFSResponse {
    data: OFSPropertyDetails;
}
declare class OFSPropertyListResponse extends OFSResponse {
    data: OFSPropertyList;
}

declare class OFS {
    private _credentials;
    private _hash;
    private _baseURL;
    private static DEFAULT_DOMAIN;
    get credentials(): OFSCredentials;
    set credentials(v: OFSCredentials);
    get authorization(): string;
    constructor(credentials: OFSCredentials);
    get instance(): string;
    private static authenticateUser;
    private _get;
    private _patch;
    private _put;
    private _post;
    private _postMultiPart;
    private _delete;
    getSubscriptions(): Promise<OFSSubscriptionResponse>;
    createActivity(data: any): Promise<OFSResponse>;
    deleteActivity(aid: number): Promise<OFSResponse>;
    getActivityDetails(aid: number): Promise<OFSActivityResponse>;
    updateActivity(aid: number, data: any): Promise<OFSResponse>;
    getActivityFilePropertyContent(aid: number, propertyLabel: string, nediaType?: string): Promise<OFSResponse>;
    getActivityFilePropertyMetadata(aid: number, propertyLabel: string): Promise<OFSResponse>;
    getActivityFileProperty(aid: number, propertyLabel: string): Promise<OFSResponse>;
    setActivityFileProperty(aid: number, propertyLabel: string, blob: Blob, fileName: string, contentType?: string): Promise<OFSResponse>;
    getUsers(offset?: number, limit?: number): Promise<OFSResponse>;
    /**
     * Retrieves all users from the OFS API.
     * @returns An object containing all users.
     */
    getAllUsers(): Promise<any>;
    getUserDetails(uname: string): Promise<OFSResponse>;
    importPlugins(file?: PathLike, data?: string): Promise<OFSResponse>;
    getProperties(params?: OFSGetPropertiesParams): Promise<OFSPropertyListResponse>;
    getPropertyDetails(pid: string): Promise<OFSPropertyDetailsResponse>;
    createReplaceProperty(data: OFSPropertyDetails): Promise<OFSPropertyDetailsResponse>;
    updateProperty(data: OFSPropertyDetails): Promise<OFSPropertyDetailsResponse>;
}

export { ActivityListResponse, ActivityResponse, ListResponse, OFS, OFSActivityResponse, OFSCredentials, OFSGetPropertiesParams, OFSPropertyDetails, OFSPropertyDetailsResponse, OFSPropertyListResponse, OFSResponse, OFSResponseInterface, OFSSubscriptionResponse, OFSTranslation, Subscription, SubscriptionListResponse };
