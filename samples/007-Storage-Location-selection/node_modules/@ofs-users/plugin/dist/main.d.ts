import { OFS } from "@ofs-users/proxy";
export declare class OFSMessage {
    apiVersion: number;
    method: string;
    securedData?: any;
    sendInitData?: boolean;
    static parse(str: string): OFSMessage;
}
export declare enum Method {
    Close = "close",
    Open = "open",
    Update = "update",
    UpdateResult = "updateResult",
    Init = "init",
    Ready = "ready",
    InitEnd = "initEnd"
}
export declare class OFSOpenMessage extends OFSMessage {
    entity: string | undefined;
}
export declare class OFSCloseMessage extends OFSMessage {
    method: string;
    activity?: any;
}
export declare abstract class OFSPlugin {
    private _proxy;
    private _tag;
    constructor(tag: string);
    get proxy(): OFS;
    get tag(): string;
    /**
     * Processes received messages
     * @param message Message received
     * @returns
     */
    private _getWebMessage;
    private _init;
    private _storeCredentials;
    private static _getOriginURL;
    private _sendWebMessage;
    sendMessage(method: Method, data?: any): void;
    private _setup;
    abstract open(data: OFSOpenMessage): void;
    init(message: OFSMessage): void;
    close(data?: any): void;
    update(data?: any): void;
    error(parsed_message: OFSMessage): void;
    wakeup(parsed_message: OFSMessage): void;
    updateResult(parsed_message: OFSMessage): void;
}
